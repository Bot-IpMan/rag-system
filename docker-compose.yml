services:
  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:0.4.18
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # RAG Service - Основна обробка документів і пошук
  rag-service:
    build:
      context: ./rag-service
    ports:
      - "8002:8000"
    volumes:
      - ./data:/app/data
      - ./data/vector_db:/app/vector_db
      - ~/.cache/huggingface:/root/.cache/huggingface
    environment:
      - PYTHONUNBUFFERED=1
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - CHUNK_SIZE=1000
      - CHUNK_OVERLAP=200
      - HF_HUB_CACHE=/root/.cache/huggingface
    networks:
      - rag_network
    depends_on:
      chromadb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_DEBUG=INFO
      - OLLAMA_CONTEXT_LENGTH=4096
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # LLM Integration Service
  llm-service:
    build:
      context: ./llm-service
    ports:
      - "8003:8000"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - DEFAULT_MODEL=llama3.1:8b
      - RAG_SERVICE_URL=http://rag-service:8000
    networks:
      - rag_network
    depends_on:
      ollama:
        condition: service_healthy
      rag-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Web Interface
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_RAG_API_URL=http://localhost:8002
      - REACT_APP_LLM_API_URL=http://localhost:8003
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_HOST=0.0.0.0
      - WATCHPACK_POLLING=true
    networks:
      - rag_network
    depends_on:
      rag-service:
        condition: service_healthy
      llm-service:
        condition: service_healthy
    restart: unless-stopped

  # Redis для кешування
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model downloader service - завантажує модель один раз при старті
  model-downloader:
    image: ollama/ollama:latest
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rag_network
    depends_on:
      ollama:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Завантаження моделі llama3.1:8b...' &&
        ollama pull llama3.1:8b &&
        echo 'Модель завантажена успішно!'
      "
    environment:
      - OLLAMA_HOST=http://ollama:11434
    restart: "no"

networks:
  rag_network:
    driver: bridge

volumes:
  chroma_data:
    driver: local
  ollama_data:
    driver: local
  redis_data:
    driver: local
#!/usr/bin/env python3
"""
diagnose.py - –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º–∏
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Ç–∞ –≤–∏—è–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏
"""

import requests
import json
import sys
import time
from typing import Dict, List, Tuple, Optional
import subprocess
import os
from datetime import datetime

class RAGDiagnostics:
    def __init__(self):
        self.services = {
            'ChromaDB': {
                'url': 'http://localhost:8001/api/v1/heartbeat',
                'container': 'rag-system-chromadb-1',
                'healthy': False
            },
            'RAG Service': {
                'url': 'http://localhost:8002/health',
                'container': 'rag-system-rag-service-1',
                'healthy': False
            },
            'LLM Service': {
                'url': 'http://localhost:8003/health',
                'container': 'rag-system-llm-service-1',
                'healthy': False
            },
            'Ollama': {
                'url': 'http://localhost:11434/api/tags',
                'container': 'rag-system-ollama-1',
                'healthy': False
            },
            'Frontend': {
                'url': 'http://localhost:3000',
                'container': 'rag-system-frontend-1',
                'healthy': False
            },
            'Redis': {
                'url': None,  # Redis doesn't have HTTP endpoint
                'container': 'rag-system-redis-1',
                'healthy': False
            }
        }
        
        self.results = []

    def print_header(self):
        print("=" * 60)
        print("üîç RAG SYSTEM DIAGNOSTICS")
        print("=" * 60)
        print(f"üìÖ –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()

    def check_docker_compose(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ø—É—â–µ–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"""
        print("üê≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
        try:
            result = subprocess.run(['docker', 'compose', 'ps'], 
                                  capture_output=True, text=True, check=True)
            print("üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:")
            print(result.stdout)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å
            running_containers = []
            for line in result.stdout.split('\n')[1:]:  # Skip header
                if line.strip() and 'Up' in line:
                    container_name = line.split()[0]
                    running_containers.append(container_name)
            
            print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {len(running_containers)}")
            return len(running_containers) > 0
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Docker Compose: {e}")
            print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ: docker compose up -d")
            return False
        except FileNotFoundError:
            print("‚ùå Docker Compose –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker —Ç–∞ Docker Compose")
            return False

    def check_service_health(self, name: str, url: Optional[str], timeout: int = 5) -> Tuple[bool, str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
        if url is None:
            return True, "No HTTP endpoint"
        
        try:
            response = requests.get(url, timeout=timeout)
            if response.status_code == 200:
                return True, f"OK ({response.status_code})"
            else:
                return False, f"HTTP {response.status_code}"
        except requests.exceptions.ConnectionError:
            return False, "Connection refused"
        except requests.exceptions.Timeout:
            return False, "Timeout"
        except Exception as e:
            return False, f"Error: {str(e)}"

    def get_container_logs(self, container_name: str, lines: int = 10) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            result = subprocess.run(['docker', 'logs', '--tail', str(lines), container_name], 
                                  capture_output=True, text=True)
            return result.stdout + result.stderr
        except Exception as e:
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥–∏: {e}"

    def check_all_services(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤...")
        print("-" * 60)
        
        for name, config in self.services.items():
            print(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {name}...", end=" ")
            
            healthy, message = self.check_service_health(name, config['url'])
            config['healthy'] = healthy
            
            if healthy:
                print(f"‚úÖ {message}")
            else:
                print(f"‚ùå {message}")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
                print(f"üìã –û—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏ {config['container']}:")
                logs = self.get_container_logs(config['container'], 5)
                for line in logs.split('\n')[-5:]:
                    if line.strip():
                        print(f"  {line}")
                print()

    def check_disk_space(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É"""
        print("üíæ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É...")
        try:
            result = subprocess.run(['df', '-h', '/'], capture_output=True, text=True, check=True)
            print(result.stdout)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∏—Å–∫—É: {e}")

    def check_docker_resources(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤ Docker"""
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤ Docker...")
        try:
            # Docker system df
            result = subprocess.run(['docker', 'system', 'df'], 
                                  capture_output=True, text=True, check=True)
            print("üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ Docker:")
            print(result.stdout)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
            result = subprocess.run(['docker', 'stats', '--no-stream'], 
                                  capture_output=True, text=True, check=True)
            print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:")
            print(result.stdout)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å—ñ–≤: {e}")

    def test_basic_functionality(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ"""
        print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ...")
        
        # –¢–µ—Å—Ç RAG Service
        if self.services['RAG Service']['healthy']:
            try:
                # –¢–µ—Å—Ç –ø–æ—à—É–∫—É
                response = requests.post('http://localhost:8002/search', 
                                       json={'query': 'test', 'limit': 1}, 
                                       timeout=10)
                if response.status_code == 200:
                    print("‚úÖ RAG –ø–æ—à—É–∫ –ø—Ä–∞—Ü—é—î")
                else:
                    print(f"‚ùå RAG –ø–æ—à—É–∫: HTTP {response.status_code}")
            except Exception as e:
                print(f"‚ùå RAG –ø–æ—à—É–∫: {e}")
        
        # –¢–µ—Å—Ç LLM Service
        if self.services['LLM Service']['healthy']:
            try:
                response = requests.get('http://localhost:8003/models', timeout=10)
                if response.status_code == 200:
                    print("‚úÖ LLM —Å–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î")
                    models = response.json()
                    print(f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ: {len(models.get('models', []))}")
                else:
                    print(f"‚ùå LLM —Å–µ—Ä–≤—ñ—Å: HTTP {response.status_code}")
            except Exception as e:
                print(f"‚ùå LLM —Å–µ—Ä–≤—ñ—Å: {e}")

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º"""
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:")
        print("-" * 60)
        
        unhealthy_services = [name for name, config in self.services.items() 
                            if not config['healthy']]
        
        if not unhealthy_services:
            print("‚úÖ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
            return
        
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:", ", ".join(unhealthy_services))
        print()
        
        recommendations = [
            "1. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É: docker compose down && docker compose up -d",
            "2. üßπ –û—á–∏—Å—Ç—ñ—Ç—å Docker: docker system prune -f",
            "3. üì¶ –ü–µ—Ä–µ–±—ñ–ª–¥—å—Ç–µ –æ–±—Ä–∞–∑–∏: docker compose build --no-cache",
            "4. üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: docker compose logs -f [service-name]",
            "5. üíæ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ –Ω–∞ –¥–∏—Å–∫—É",
            "6. üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—Ä—Ç–∏ (8001-8003, 11434, 3000): netstat -tulpn",
            "7. üê≥ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Docker daemon: docker info"
        ]
        
        for rec in recommendations:
            print(rec)

    def export_results(self, filename: str = "rag_diagnostics.json"):
        """–ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        results = {
            'timestamp': datetime.now().isoformat(),
            'services': self.services,
            'summary': {
                'total_services': len(self.services),
                'healthy_services': sum(1 for s in self.services.values() if s['healthy']),
                'unhealthy_services': sum(1 for s in self.services.values() if not s['healthy'])
            }
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

    def run_full_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.print_header()
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if not self.check_docker_compose():
            print("‚ùå Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ñ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
            return False
        
        print()
        self.check_all_services()
        print()
        self.check_disk_space()
        print()
        self.check_docker_resources()
        print()
        self.test_basic_functionality()
        
        # –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        self.generate_recommendations()
        
        # –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print()
        self.export_results()
        
        # –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
        healthy_count = sum(1 for s in self.services.values() if s['healthy'])
        total_count = len(self.services)
        
        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö: {healthy_count}/{total_count} —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        
        if healthy_count == total_count:
            print("üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–∞!")
            return True
        else:
            print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏")
            return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("–ó–∞–ø—É—Å–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ RAG —Å–∏—Å—Ç–µ–º–∏...\n")
    
    diagnostics = RAGDiagnostics()
    success = diagnostics.run_full_diagnostics()
    
    # –ö–æ–¥ –≤–∏—Ö–æ–¥—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()